/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/genomenote Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Increasing the number of CPUs often gives diminishing returns, so we increase it
    following a logarithm curve. Example:
        - 0 < value <= 1: start + step
        - 1 < value <= 2: start + 2*step
        - 2 < value <= 4: start + 3*step
        - 4 < value <= 8: start + 4*step
    In order to support re-runs, the step increase may be multiplied by the attempt
    number prior to calling this function.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Modified logarithm function that doesn't return negative numbers
def positive_log(value, base) {
    if (value <= 1) {
        return 0
    } else {
        return Math.log(value)/Math.log(base)
    }
}

def log_increase_cpus(start, step, value, base) {
    return check_max(start + step * (1 + Math.ceil(positive_log(value, base))), 'cpus')
}


process {

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // In this configuration file, we give little resources by default and
    // explicitly bump them up for some processes.
    // All rules should still increase resources every attempt to allow the
    // pipeline to self-heal from MEMLIMIT/RUNLIMIT.

    // Default
    cpus   = 1
    memory = { check_max( 50.MB * task.attempt, 'memory' ) }
    time   = { check_max( 30.min * task.attempt, 'time' ) }

    // These processes can take more than 30 min, and sometimes several hours.
    // Let's give them 8 hours, which should be plenty of time.
    withName: 'BUSCO|COOLER_ZOOMIFY|BEDTOOLS_BAMTOBED|COOLER_CLOAD|FILTER_BED|FILTER_SORT|BED_SORT' {
        time   = { check_max( 8.hour * task.attempt, 'time' ) }
    }

    withName: SAMTOOLS_VIEW {
        memory = { check_max( 1.GB  * task.attempt, 'memory'  ) }
    }

    withName: FASTK_FASTK {
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
    }

    withName: MERQURYFK_MERQURYFK {
        memory = { check_max( meta.genome_size < 840000000 ? (Math.ceil(meta.genome_size/60000000) * 1.GB * task.attempt) : (Math.ceil(meta.genome_size/1000000000) * 2.GB * task.attempt + 12.GB), 'memory' ) }
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
    }

    withName: BUSCO {
        //memory = { check_max(4.GB + Math.ceil(meta.genome_size/60000000) * 8.GB * task.attempt, 'memory'  ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        // duration = 71.45*x+105.28
        // memory = y=6483.28*x+3837.4
        // above with 6 CPUs
    }

    withName: BEDTOOLS_BAMTOBED {
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
    } 

    withName: 'BED_SORT|FILTER_SORT' {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        //time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }

    withName: COOLER_CLOAD {
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
    }

    withName: COOLER_DUMP {
        memory = { check_max( 100.MB * task.attempt, 'memory'  ) }
    }

    withName: COOLER_ZOOMIFY {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( (meta.genome_size < 1000000000 ? 16.GB : 24.GB) * task.attempt, 'memory' ) }
//(Math.ceil(meta.genome_size/60000000) * 1.GB * task.attempt) : (Math.ceil(meta.genome_size/1000000000) * 2.GB * task.attempt + 12.GB), 'cpus' ) }
        // RAM 16 GB if if < 1 GB else 24 GB
        // 4 CPUs (or 3 ?)
        // duration = 30 min if < 1 GB else a few hours
    }

    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}
